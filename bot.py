import sqlite3
import asyncio
import uuid
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from pyrogram.errors.exceptions.bad_request_400 import UserIsBlocked  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

api_id = 27237447
api_hash = '8caac0861f06f211c6c27ec00b98d33c'
bot_token = '7036230952:AAEYL9EsIy8oIJ4yTUdluI1ymjY3u9_wwIk'

app = Client("my_bot", api_id=api_id, api_hash=api_hash, bot_token=bot_token)

admin_chat_id = 7048194752  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

products = {
    "–ê–ù–ì–ê–†–°–ö": [],
    "–ò–†–ö–£–¢–°–ö": [],
    "–£–°–û–õ–¨–ï-–°–ò–ë–ò–†–°–ö–û–ï": [],
    "–ó–ò–ú–ê": [],
    "–°–ê–Ø–ù–°–ö": []
}
current_order = {}
pending_orders = {}

reviews = [
    {"author": "Saimon(pe–∑–µ—Ä–≤)", "text": "–†–û–í–ù–Ø–ì–ê –ú–≠–î–ñ–ò–ö 0,3 –ø–æ–¥ –∫–∞–º–Ω–µ–º, –±–µ–∑ –°–û–ú–ù–ï–ù–ò–ô –∏ –≤ –ö–ê–°–ê–ù–ò–ï", "date": "11 –∏—é–ª", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "–°–∞–Ω—è", "text": "–í –∫–∞—Å–∞–Ω–∏–µ 05 –¥–æ–º", "date": "10 –∏—é–ª", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "—Ä—É—Å–∫–∏–π", "text": "–î–æ–º–∞ –∫–∞–º–µ–Ω—å?", "date": "10 –∏—é–ª", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "nekiy", "text": "–ó–∞–±—Ä–∞–ª", "date": "10 –∏—é–ª", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "–†–æ—Ç–æ–±–µ–∫", "text": "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º) —Ö–æ—Ä–æ—à–æ –ª–æ–∂–∏—Ç–µ, –≤—Å—ë –ø–µ—Ä–µ–∫–æ–ø–∞–Ω–æ. –ù–æ —è —Å–≤–æ—ë –Ω–∞—à—ë–ª. –í—Å—ë –æ—Ç–ª–∏—á–Ω–æüëçüëèüòÜ", "date": "09 –∏—é–ª", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "–ß–µ—Å—Ç–Ω—ã–π", "text": "–î–æ–º–∞ –≥—É—Å–µ–∫üëç", "date": "08 –∏—é–ª", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "Isconber", "text": "üëç", "date": "06 –∏—é–ª", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "–ù–∞–¥–µ–∂–¥–∞", "text": "–ö–∞—á –æ–≥–æ–Ω—å", "date": "04 –∏—é–ª", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "–ë—Ä–∞—Ç–∞–Ω", "text": "–ù–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞—à–µ–ª —ç—Ç–æ –ª—É—á—à–∏–π –º–∞—Ä–∫–µ—Ç!!!", "date": "01 –∏—é–ª", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "–í–∞—Å—è", "text": "1–≥ –¥–æ–º–∞—à–Ω–∏–π", "date": "30 –∏—é–Ω", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "vanesh", "text": "–ö—É—Ä–∞ –≥–µ–Ω–∏–π –∞—Ö–∞—Ö–∞—Ö–∞—Öüëå", "date": "26 –∏—é–Ω", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "–ö—Ç–æ –£–±–∏–ª –ë–∏–ª–ª–∏", "text": "–ö–ª–∞–¥ –≤ –∫–∞—Å—É—Ö—É –µ–¥—É –ø—Ä–æ–±—ã–≤–∞—Ç—å", "date": "18 –∏—é–Ω", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "vanesh", "text": "–º–µ—Ñ—á–∏–∫ –ø—Ç–∏—á–∫–∞ –≤ –∫–ª–µ—Ç–∫–µ –≥—É—Å—å –≤ –¥—É—Ö–æ–≤–∫–∏", "date": "25 –∏—é–Ω", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "–í–∞—Å—è", "text": "–°–∞–≤—Ä–∏–∫ –¥–æ–º–∞", "date": "03 –∏—é–Ω", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "–∞–Ω—Ç–∏–≥–µ—Ä–æ–π", "text": "–≥—Ä–∞–º –∫—Ä–∏—Å—Ç–∞–ª–æ–≤ –ø–æ–¥–Ω—è—Ç–Ω—ã–µ", "date": "02 –∏—é–Ω", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "Valentin", "text": "–º—ç–¥–∂–∏–∫ —Å–ø—Å –≤ –∫—ç—Å", "date": "19 –º–∞—è", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "–ú–∞—Ä–∏–Ω–∞", "text": "–ë—Ä–∞–ªa –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –ø–æ –∞–¥—Ä–µ—Å—É –±—ã–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –Ω–æ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±—ã—Å—Ç—Ä–æ —Ä–µ—à–∏–ª–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ç–Ω—ã–π —Å–≤—ë—Ä—Ç–æ–∫ –±—ã–ª –Ω–∞–π–¥–µ–Ω ü•≤", "date": "05 –º–∞—è", "city": "–ò–†–ö–£–¢–°–ö"},
    {"author": "Kasper84", "text": "–í—ã–ø–∏–ª –∏ –≤ –∫–∞—Å–∞–Ω–∏–µ —Å–Ω—è—Ç. –í –≥–æ—Ä–æ–¥–µ.", "date": "30 –∞–ø—Ä", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "Alla", "text": "–î–∞–ª–µ–∫–æ, –Ω–æ –≤—Å—ë —Å—É–ø–µ—Ä!", "date": "17 –∞–ø—Ä", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "–õ—ë—Ö–∞", "text": "–î–∞–ª–µ–∫–æ, –Ω–æ –ø–æ–¥–Ω—è–ª –≤ –∫—ç—Å, –∫–∞—á–µ—Å—Ç–≤–æ –∑6—Å!!!! –æ—Ç –¥—É—à–∏.", "date": "03 –∞–ø—Ä", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "Lust", "text": "–†–æ–¥–Ω–æ–π –∫–∞–º–µ–Ω—å –¥–æ–º–∞ üëç", "date": "01 –∞–ø—Ä", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "Dark", "text": "–ü–µ—Ä–≤—ã–π —Ä–∞–∑ –±–µ—Ä—ë–º –≤ –¥–∞–Ω–Ω–æ–º –º–∞—Ä–∫–µ—Ç–µ. –û—Ç –ø–æ–∫—É–ø–∫–∏ –¥–æ –ø–æ–¥—ä—ë–º–∞ 15 –º–∏–Ω. –ê–¥—Ä–µ—Å –ø–æ–¥–Ω—è—Ç –≤ –∫—ç—Å –º–∞–≥–Ω–∏—Ç –≥–æ—Ä–æ–¥—Å–∫–∞—è –ª–æ–∫–∞—Ü–∏—è. –ó–∞ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–ø–∏—à–µ–º –∑–∞–≤—Ç—Ä–∞", "date": "21 –º–∞—Ä", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "Kasper84", "text": "–≤–∏–ø —Å–∫ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –æ–±–µ–∑–≤—Ä–µ–∂–µ–Ω.", "date": "15 –º–∞—Ä", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "Kasper84", "text": "–°–∞–≤—Ä–∏–∫ –¥–æ–º–∞—à–Ω–∏–π", "date": "12 –º–∞—Ä", "city": "–ê–ù–ì–ê–†–°–ö"},
    {"author": "–î—É–º–∞—é", "text": "–í—Å—ë –∫—Ä–∞—Å–∏–≤–æ üëç", "date": "07 –º–∞—Ä", "city": "–ê–ù–ì–ê–†–°–ö"},
]

BTC_EXCHANGE_RATE = 2500000

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db', check_same_thread=False)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS users
             (chat_id INTEGER PRIMARY KEY, user_id INTEGER)''')
c.execute('''CREATE TABLE IF NOT EXISTS purchases
             (user_id INTEGER, product_name TEXT, city TEXT, date TEXT)''')
c.execute('''CREATE TABLE IF NOT EXISTS reviews
             (user_id INTEGER, review TEXT, author TEXT, date TEXT, city TEXT)''')

def get_user_id(chat_id):
    with conn:
        c.execute("SELECT user_id FROM users WHERE chat_id = ?", (chat_id,))
        row = c.fetchone()
        if row:
            return row[0]
        else:
            user_id = c.execute("SELECT COUNT(*) FROM users").fetchone()[0] + 1
            c.execute("INSERT INTO users (chat_id, user_id) VALUES (?, ?)", (chat_id, user_id))
            return user_id

def calculate_btc_amount(rub_amount):
    return rub_amount / BTC_EXCHANGE_RATE

async def notify_users(product):
    with conn:
        c.execute("SELECT chat_id FROM users")
        users = c.fetchall()
    for user in users:
        chat_id = user[0]
        message = (
            f"–ì–æ—Ä–æ–¥ {product['city']} –ø–æ–ø–æ–ª–Ω–µ–Ω —Å–≤–µ–∂–∏–º–∏ {product['weight']} {product['name']} –≤ —Ä–∞–π–æ–Ω–µ {product['location']}.\n"
            f"–¢–∏–ø: {product['type']}\n"
            "–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫."
        )
        buttons = [
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        try:
            await app.send_message(chat_id, message, reply_markup=InlineKeyboardMarkup(buttons))
        except UserIsBlocked:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {str(e)}")

@app.on_message(filters.command("start"))
async def start(client, message):
    chat_id = message.chat.id
    user_id = get_user_id(chat_id)
    buttons = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ [–í –Ω–∞–ª–∏—á–∏–∏]", callback_data="start_shopping")],
        [InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_account")],
        [InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π?", callback_data="payment_issues")],
        [InlineKeyboardButton(f"–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ [{len(reviews)}]", callback_data="customer_reviews")],
        [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data="refresh_page")],
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞", callback_data="shop_contacts")],
        [InlineKeyboardButton("–®–≤—ã—Ä–æ–∫—É—Ä—ã", url="https://t.me/+Zx3PQ4wedFA1OGUy")],
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏–ª 50 —Ä—É–±–ª–µ–π –Ω–∞ —Å—á—ë—Ç!", callback_data="get_bonus")],
        [InlineKeyboardButton("–õ—é–¥—Å–∫–æ–π —Ö–æ–¥", url="https://t.me/+Igh2MH5neNc2–óDNk")],
        [InlineKeyboardButton("EPIC GROUP - –†–æ–≤–Ω—ã–π —á–∞—Ç –†–§", url="https://t.me/+vWTGHDyhvP5mMTEx")],
        [InlineKeyboardButton("–ê–Ω–æ–Ω–∏–º–Ω—ã–π —Ñ–æ—Ç–æ—Ö–æ—Å—Ç–∏–Ω–≥", url="https://t.me/necroimg_bot")]
    ]
    await message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ streetmagic38.\n"
        f"==============================\n"
        f"–ê–ù–ì–ê–†–°–ö - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–ê–ù–ì–ê–†–°–ö'] else '–ü—É—Å—Ç–æ')}\n"
        f"–£—Å–æ–ª—å–µ-–°–∏–±–∏—Ä—Å–∫–æ–µ - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–£–°–û–õ–¨–ï-–°–ò–ë–ò–†–°–ö–û–ï'] else '–ü—É—Å—Ç–æ')}\n"
        f"–ó–∏–º–∞ - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–ó–ò–ú–ê'] else '–ü—É—Å—Ç–æ')}\n"
        f"–°–∞—è–Ω—Å–∫ - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–°–ê–Ø–ù–°–ö'] else '–ü—É—Å—Ç–æ')}\n"
        f"–ò—Ä–∫—É—Ç—Å–∫ - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–ò–†–ö–£–¢–°–ö'] else '–ü—É—Å—Ç–æ')}\n"
        f"==============================\n"
        f"–û –º–∞–≥–∞–∑–∏–Ω–µ:\n"
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –º–∞—Ä–∫–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∏—Ç—Ä–∏–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
        f"==============================\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: 0 —Ä—É–±–ª–µ–π\n"
        f"–í–∞—à ID –≤–Ω—É—Ç—Ä–∏ —Å–∏—Å—Ç–µ–º—ã: {user_id}\n"
        f"–í–∞—à CHAT-ID: {chat_id}\n"
        f"==============================\n"
        f"–°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

@app.on_message(filters.command("admin") & filters.user(admin_chat_id))
async def admin_panel(client, message):
    await message.reply_text(
        "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_product <–Ω–∞–∑–≤–∞–Ω–∏–µ>, <–≤–µ—Å>, <—Ä–∞–π–æ–Ω>, <—Ç–∏–ø>, <—Ü–µ–Ω–∞>, <–≥–æ—Ä–æ–¥> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_product <order_id> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.\n"
        "–ü—Ä–∏–º–µ—Ä: /add_product Alphapvp, 1–≥, –¶–µ–Ω—Ç—Ä, –¢–∞–π–Ω–∏–∫, 5000‚ÇΩ, –ê–ù–ì–ê–†–°–ö\n"
        "–ü—Ä–∏–º–µ—Ä: /delete_product 123e4567-e89b-12d3-a456-426614174000"
    )

@app.on_message(filters.command("add_product") & filters.user(admin_chat_id))
async def add_product(client, message: Message):
    try:
        _, product_info = message.text.split(" ", 1)
        name, weight, location, product_type, price, *city = map(str.strip, product_info.split(","))
        city = city[0].upper() if city else "–ê–ù–ì–ê–†–°–ö"
        if city not in products:
            await message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ì–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
            return
        order_id = str(uuid.uuid4())
        product = {"name": name, "weight": weight, "location": location, "type": product_type, "price": price, "order_id": order_id, "city": city}
        products[city].append(product)
        await message.reply_text(f"–¢–æ–≤–∞—Ä {name} –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤ –≥–æ—Ä–æ–¥ {city}!")
        await notify_users(product)
        print(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {name}, {weight}, {location}, {product_type}, {price}, {order_id}, {city}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    except ValueError:
        await message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_product <–Ω–∞–∑–≤–∞–Ω–∏–µ>, <–≤–µ—Å>, <—Ä–∞–π–æ–Ω>, <—Ç–∏–ø>, <—Ü–µ–Ω–∞>, <–≥–æ—Ä–æ–¥>")

@app.on_message(filters.command("delete_product") & filters.user(admin_chat_id))
async def delete_product(client, message: Message):
    try:
        _, order_id = message.text.split(" ", 1)
        order_id = order_id.strip()
        product_to_delete = None
        for city in products:
            product_to_delete = next((product for product in products[city] if product["order_id"] == order_id), None)
            if product_to_delete:
                products[city].remove(product_to_delete)
                break
        if product_to_delete:
            await message.reply_text(f"–¢–æ–≤–∞—Ä —Å ID {order_id} —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"–£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä: {product_to_delete['name']}, {product_to_delete['weight']}, {product_to_delete['location']}, {product_to_delete['price']}, {order_id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        else:
            await message.reply_text(f"–¢–æ–≤–∞—Ä —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_product <order_id>")

@app.on_message(filters.command("confirm_payment") & filters.user(admin_chat_id))
async def confirm_payment(client, message: Message):
    try:
        _, order_id = message.text.split(" ", 1)
        order_id = order_id.strip()
        if order_id in pending_orders:
            chat_id = pending_orders[order_id]['chat_id']
            product = pending_orders[order_id]['product']
            location_url = "https://t.me/necroimg_bot?start=photo8e2ea538f92"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞
            await app.send_message(chat_id, f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ {location_url}")
            user_id = get_user_id(chat_id)
            with conn:
                c.execute("INSERT INTO purchases (user_id, product_name, city, date) VALUES (?, ?, ?, ?)", 
                          (user_id, product['name'], product['city'], datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
            del pending_orders[order_id]
        else:
            await message.reply_text("–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /confirm_payment <order_id>")

@app.on_callback_query()
async def handle_callback_query(client, callback_query):
    global current_order
    data = callback_query.data
    chat_id = callback_query.message.chat.id
    user_id = get_user_id(chat_id)

    if data == "start_shopping":
        buttons = [
            [InlineKeyboardButton(f"–≥.–ê–ù–ì–ê–†–°–ö [{('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–ê–ù–ì–ê–†–°–ö'] else '–ü—É—Å—Ç–æ')}] [–í—ã–±—Ä–∞—Ç—å]", callback_data="choose_–ê–ù–ì–ê–†–°–ö")],
            [InlineKeyboardButton(f"–≥.–ò–†–ö–£–¢–°–ö [{('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–ò–†–ö–£–¢–°–ö'] else '–ü—É—Å—Ç–æ')}] [–í—ã–±—Ä–∞—Ç—å]", callback_data="choose_–ò–†–ö–£–¢–°–ö")],
            [InlineKeyboardButton(f"–≥.–£–°–û–õ–¨–ï-–°–ò–ë–ò–†–°–ö–û–ï [{('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–£–°–û–õ–¨–ï-–°–ò–ë–ò–†–°–ö–û–ï'] else '–ü—É—Å—Ç–æ')}] [–í—ã–±—Ä–∞—Ç—å]", callback_data="choose_–£–°–û–õ–¨–ï-–°–ò–ë–ò–†–°–ö–û–ï")],
            [InlineKeyboardButton(f"–≥.–ó–ò–ú–ê [{('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–ó–ò–ú–ê'] else '–ü—É—Å—Ç–æ')}] [–í—ã–±—Ä–∞—Ç—å]", callback_data="choose_–ó–ò–ú–ê")],
            [InlineKeyboardButton(f"–≥.–°–ê–Ø–ù–°–ö [{('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–°–ê–Ø–ù–°–ö'] else '–ü—É—Å—Ç–æ')}] [–í—ã–±—Ä–∞—Ç—å]", callback_data="choose_–°–ê–Ø–ù–°–ö")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await callback_query.message.edit_text(
            "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏\n"
            "==============================\n"
            "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≥–æ—Ä–æ–¥ –∏–∑ –Ω–∞–ª–∏—á–∏—è:\n",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    elif data.startswith("choose_"):
        city = data.split("_")[1]
        product_buttons = [
            [InlineKeyboardButton(f"{p['name']} ({p['weight']}) –∑–∞ {p['price']}‚ÇΩ [–í—ã–±—Ä–∞—Ç—å]", callback_data=f"buy_{city}_{i}")]
            for i, p in enumerate(products[city])
        ]
        if not product_buttons:
            product_buttons.append([InlineKeyboardButton("–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç", callback_data="no_products")])
        product_buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start_shopping"), InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        await callback_query.message.edit_text(
            f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏\n"
            f"==============================\n"
            f"–ì–æ—Ä–æ–¥: {city}\n"
            f"==============================\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä:",
            reply_markup=InlineKeyboardMarkup(product_buttons)
        )
    elif data.startswith("buy_"):
        _, city, product_index = data.split("_")
        product_index = int(product_index)
        product = products[city][product_index]
        current_order = {
            "product": product,
            "type": product["type"],
            "location": product["location"],
            "city": city
        }
        buttons = [
            [InlineKeyboardButton(f"–¢–∏–ø: {product['type']} [–í—ã–±—Ä–∞—Ç—å]", callback_data=f"type_{city}_{product_index}_{product['type']}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"choose_{city}"), InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await callback_query.message.edit_text(
            f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏\n"
            f"==============================\n"
            f"–ì–æ—Ä–æ–¥: {city}\n"
            f"–¢–æ–≤–∞—Ä: {product['name']} ({product['weight']})\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –∫–ª–∞–¥–∞:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    elif data.startswith("type_"):
        _, city, product_index, product_type = data.split("_")
        product_index = int(product_index)  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ product_index
        current_order["type"] = product_type
        product = products[city][product_index]
        buttons = [
            [InlineKeyboardButton(f"—Ä-–Ω: {product['location']} [–í—ã–±—Ä–∞—Ç—å]", callback_data=f"location_{city}_{product_index}_{product['location']}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"buy_{city}_{product_index}"), InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await callback_query.message.edit_text(
            f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏\n"
            f"==============================\n"
            f"–ì–æ—Ä–æ–¥: {city}\n"
            f"–¢–æ–≤–∞—Ä: {product['name']} ({product['weight']})\n"
            f"–¢–∏–ø –∫–ª–∞–¥–∞: {product_type}\n"
            f"==============================\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–π–æ–Ω:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    elif data.startswith("location_"):
        _, city, product_index, product_location = data.split("_")
        product_index = int(product_index)  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ product_index
        current_order["location"] = product_location
        buttons = [
            [InlineKeyboardButton("–í—Å—ë –ø–æ–Ω—è—Ç–Ω–æ", callback_data="all_understood"), InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"type_{city}_{product_index}_{current_order['type']}"), InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await callback_query.message.edit_text(
            "–ü—Ä–∞–≤–∏–ª–∞ –º–∞–≥–∞–∑–∏–Ω–∞\n"
            "==============================\n"
            "–ø–µ—Ä–µ–∑–∞–∫–ª–∞–¥–æ–≤ –Ω–µ—Ç. –î–ª—è —Ä–µ—à–µ–Ω–∏—è, —Å–Ω–∏–º–∞–π—Ç–µ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–∏—Å–∫–æ–≤, –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –¥–æ—à–ª–∏ –¥–æ –º–µ—Å—Ç–∞",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    elif data == "all_understood":
        product = current_order["product"]
        btc_amount = calculate_btc_amount(float(product["price"]))
        order_id = str(uuid.uuid4())
        pending_orders[order_id] = {"chat_id": chat_id, "product": product}

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await app.send_message(admin_chat_id, f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n–¢–æ–≤–∞—Ä: {product['name']} ({product['weight']})\n–¶–µ–Ω–∞: {product['price']}‚ÇΩ\nID –∑–∞–∫–∞–∑–∞: {order_id}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /confirm_payment {order_id}")

        buttons = [
            [InlineKeyboardButton(f"–ì–æ—Ä–æ–¥: {current_order['city']} [–∏–∑–º–µ–Ω–∏—Ç—å]", callback_data=f"choose_{current_order['city']}")],
            [InlineKeyboardButton(f"–¢–æ–≤–∞—Ä: {product['name']} ({product['weight']}) [–∏–∑–º–µ–Ω–∏—Ç—å]", callback_data=f"buy_{current_order['city']}_{products[current_order['city']].index(product)}")],
            [InlineKeyboardButton(f"–†–∞–π–æ–Ω: {current_order['location']} [–∏–∑–º–µ–Ω–∏—Ç—å]", callback_data=f"location_{current_order['city']}_{products[current_order['city']].index(product)}_{current_order['location']}")],
            [InlineKeyboardButton(f"–¢–∏–ø –∫–ª–∞–¥–∞: {current_order['type']} [–∏–∑–º–µ–Ω–∏—Ç—å]", callback_data=f"type_{current_order['city']}_{products[current_order['city']].index(product)}_{current_order['type']}")],
            [InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {product['price']} [–ù–∞ –∫–∞—Ä—Ç—É]", callback_data="pay_card")],
            [InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {product['price']} [–ü–æ –°–ë–ü]", callback_data="pay_sbp")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")],
        ]
        await callback_query.message.edit_text(
            f"–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–∞ –ø–æ –∑–∞–∫–∞–∑—É:\n"
            f"==============================\n"
            f"–ë–∞–ª–∞–Ω—Å RUB: 0\n"
            f"–ë–∞–ª–∞–Ω—Å BTC: 0.00000000\n"
            f"–ë–∞–ª–∞–Ω—Å LTC: 0.00000000\n"
            f"==============================\n"
            f"–õ–∏—á–Ω–∞—è —Å–∫–∏–¥–∫–∞: 0%\n"
            f"–û–±—â–∞—è —Å–∫–∏–¥–∫–∞: 0%\n"
            f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ RUB: {product['price']}\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: 0%\n"
            f"==============================\n"
            f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {product['price']}\n"
            f"–í Bitcoin: {btc_amount:.8f}\n"
            f"–î–æ –æ—Ç–º–µ–Ω—ã –æ—Å—Ç–∞–ª–æ—Å—å: 49 –º–∏–Ω.\n"
            f"ID –∑–∞–∫–∞–∑–∞: {order_id}\n",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 49 –º–∏–Ω—É—Ç
        asyncio.create_task(order_timeout(order_id, callback_query.message))

    elif data == "cancel_order":
        current_order.clear()
        await callback_query.message.edit_text("–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")

    elif data == "pay_card":
        product = current_order["product"]
        await display_payment_info(callback_query.message, product, "2200700457065448", "–ù–∞ –∫–∞—Ä—Ç—É")

    elif data == "pay_sbp":
        product = current_order["product"]
        await display_payment_info(callback_query.message, product, "2200700457065448", "–ü–æ –°–ë–ü")

    elif data == "card_and_amount":
        product = current_order["product"]
        await callback_query.message.reply_text(
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
            f"–ö–∞—Ä—Ç–∞: 2200700457065448\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {product['price']} —Ä—É–±–ª–µ–π"
        )

    elif data == "personal_account":
        chat_id = callback_query.message.chat.id
        user_id = get_user_id(chat_id)
        with conn:
            c.execute("SELECT COUNT(*) FROM purchases WHERE user_id = ?", (user_id,))
            purchases_count = c.fetchone()[0]
            c.execute("SELECT COUNT(*) FROM reviews WHERE user_id = ?", (user_id,))
            reviews_count = c.fetchone()[0]
        buttons = [
            [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö —Å—á–µ—Ç–æ–≤", callback_data="account_list")],
            [InlineKeyboardButton(f"–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫ [{purchases_count}]", callback_data="purchase_list")],
            [InlineKeyboardButton(f"–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã [{reviews_count}]", callback_data="customer_reviews")],
            [InlineKeyboardButton("PIN-–∫–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞: [–í–∫–ª—é—á–∏—Ç—å]", callback_data="pin_code")],
            [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_balance")],
            [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º –±–æ—Ç–æ–º", callback_data="bot_management")],
            [InlineKeyboardButton("–û–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É [0]", callback_data="support_requests")],
            [InlineKeyboardButton("<< –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main_menu")]
        ]
        await callback_query.message.edit_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.\n"
            f"==============================\n"
            f"–í–∞—à ID –≤–Ω—É—Ç—Ä–∏ —Å–∏—Å—Ç–µ–º—ã: {user_id}\n"
            f"–í–∞—à CHAT-ID: {chat_id}\n"
            f"==============================\n"
            f"–ë–∞–ª–∞–Ω—Å RUB: 0\n"
            f"–ë–∞–ª–∞–Ω—Å BTC: 0.00000000\n"
            f"–ë–∞–ª–∞–Ω—Å LTC: 0.00000000\n"
            f"==============================\n"
            f"–ü–æ–∫—É–ø–æ–∫: {purchases_count}\n"
            f"–û—Ç–∑—ã–≤—ã: {reviews_count}\n"
            f"–û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: 0\n"
            f"–û—Ç–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: 0",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    elif data == "account_list":
        buttons = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="personal_account"), InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await callback_query.message.edit_text(
            "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤\n"
            "==============================\n"
            "–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π, —Ç–∞–∫ –∂–µ –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–µ–∫—à—É—é, –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –∑–∞—è–≤–∫—É.\n"
            "==============================\n"
            "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    elif data == "purchase_list":
        with conn:
            c.execute("SELECT product_name, city, date FROM purchases WHERE user_id = ?", (user_id,))
            purchases = c.fetchall()
        purchases_text = "\n".join([f"{purchase[0]} ({purchase[1]}) - {purchase[2]}" for purchase in purchases]) or "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫."
        buttons = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="personal_account"), InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await callback_query.message.edit_text(
            f"–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏\n"
            "==============================\n"
            f"{purchases_text}",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    elif data == "top_up_balance":
        buttons = [
            [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ VISA/MASTERCARD", callback_data="top_up_visa")],
            [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ Litecoin", callback_data="top_up_litecoin")],
            [InlineKeyboardButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω", callback_data="activate_coupon")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="personal_account"), InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await callback_query.message.edit_text(
            "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞\n"
            "==============================\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    elif data == "bot_management":
        buttons = [
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="personal_account"), InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_bot_management")]
        ]
        await callback_query.message.edit_text(
            "–¢–≤–æ–π –Ω–µ—É–±–∏–≤–∞–µ–º—ã–π –±–æ—Ç –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ streetmagic38.\n"
            "==============================\n"
            "1. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –±–æ–Ω—É—Å –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ 50 —Ä—É–±. –Ω–∞ –±–∞–ª–∞–Ω—Å.\n"
            "2. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å 5% –Ω–∞ –±–∞–ª–∞–Ω—Å, —Å –∫–∞–∂–¥–æ–≥–æ –∫—Ç–æ –∫—É–ø–∏—Ç —á–µ—Ä–µ–∑ —Ç–≤–æ–π –±–æ—Ç.\n"
            "3. –¢—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ —Å–æ —Å–≤–æ–∏–º –ª—é–±–∏–º—ã–º –º–∞–≥–∞–∑–∏–Ω–æ–º, —Ç.–∫ –æ–Ω —Ç–æ–ª—å–∫–æ —Ç–≤–æ–π –±–æ—Ç.\n"
            "==============================\n"
            "–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –±—Ä–æ–¥–∏—Ç—å –ø–æ —á–∞—Ç–∞–º –≤ –ø–æ–∏—Å–∫–∞—Ö –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞, –ø–æ–ø–∞–¥–∞—è –Ω–∞ —Ñ–µ–π–∫–æ–≤ –∏ —à–∞–≤–µ—Ä—â–∏–∫–æ–≤.\n"
            "==============================\n"
            "–®–∞–≥ - 1: –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞.\n"
            "==============================\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç: @BotFather –∏ –Ω–∞–∂–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    elif data == "support_requests":
        buttons = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É", url="https://t.me/helpmagic1")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="personal_account"), InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await callback_query.message.edit_text(
            "–ó–∞–ø—Ä–æ—Å—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
            "==============================\n"
            "–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞.",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    elif data == "payment_issues":
        buttons = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await callback_query.message.edit_text(
            "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π\n"
            "==============================\n"
            "1. –ù–µ –æ—à–∏–±–∏—Å—å –≤ —Å—É–º–º–µ, –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ—ë –∏ –æ–Ω–∞ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è —Ç–µ–±–µ –≤ –±—É—Ñ–µ—Ä, –∫–∞–∫ –∏ –∫–∞—Ä—Ç–∞.\n"
            "2. –î–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞, –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–µ–±–µ –∫–∞—Ä—Ç—ã –∏ —Å—É–º–º—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n"
            "3. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–æ–ª–µ–µ 40 –º–∏–Ω—É—Ç, –ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.\n"
            "4. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø–ª–∞—Ç—ã –ø–∏—Å–∞—Ç—å –Ω–∞ –ö–æ–Ω—Ç–∞–∫—Ç: @helpmagic1",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    elif data == "refresh_page":
        await callback_query.message.edit_text("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–≥–∞–∑–∏–Ω–∞...", reply_markup=callback_query.message.reply_markup)
        await callback_query.message.edit_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ streetmagic38.\n"
            f"==============================\n"
            f"–ê–ù–ì–ê–†–°–ö - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–ê–ù–ì–ê–†–°–ö'] else '–ü—É—Å—Ç–æ')}\n"
            f"–£—Å–æ–ª—å–µ-–°–∏–±–∏—Ä—Å–∫–æ–µ - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–£–°–û–õ–¨–ï-–°–ò–ë–ò–†–°–ö–û–ï'] else '–ü—É—Å—Ç–æ')}\n"
            f"–ó–∏–º–∞ - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–ó–ò–ú–ê'] else '–ü—É—Å—Ç–æ')}\n"
            f"–°–∞—è–Ω—Å–∫ - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–°–ê–Ø–ù–°–ö'] else '–ü—É—Å—Ç–æ')}\n"
            f"–ò—Ä–∫—É—Ç—Å–∫ - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–ò–†–ö–£–¢–°–ö'] else '–ü—É—Å—Ç–æ')}\n"
            f"==============================\n"
            f"–û –º–∞–≥–∞–∑–∏–Ω–µ:\n"
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –º–∞—Ä–∫–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∏—Ç—Ä–∏–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
            f"==============================\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: 0 —Ä—É–±–ª–µ–π\n"
            f"–í–∞—à ID –≤–Ω—É—Ç—Ä–∏ —Å–∏—Å—Ç–µ–º—ã: {user_id}\n"
            f"–í–∞—à CHAT-ID: {chat_id}\n"
            f"==============================\n"
            f"–°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
            reply_markup=callback_query.message.reply_markup
        )

    elif data == "shop_contacts":
        buttons = [
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await callback_query.message.edit_text(
            "–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞:\n"
            "==============================\n"
            "–û–ø–µ—Ä–∞—Ç–æ—Ä: @helpmagic1\n"
            "==============================\n"
            "–ë–æ—Ç: @magic138_bot\n"
            "==============================\n"
            "–í—Ç–æ—Ä–æ–π –±–æ—Ç: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"
            "==============================\n"
            "–ê–¥—Ä–µ—Å —Å–∞–π—Ç–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n"
            "==============================\n"
            "–ì—Ä—É–ø–ø–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É\n"
            "==============================\n"
            "–ö–∞–Ω–∞–ª: https://t.me/+PjE_YOlRQz0zMGQ0",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    elif data == "get_bonus":
        buttons = [
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="personal_account"), InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_get_bonus")]
        ]
        await callback_query.message.edit_text(
            "–¢–≤–æ–π –Ω–µ—É–±–∏–≤–∞–µ–º—ã–π –±–æ—Ç –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ streetmagic38.\n"
            "==============================\n"
            "1. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –±–æ–Ω—É—Å –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ 50 —Ä—É–±. –Ω–∞ –±–∞–ª–∞–Ω—Å.\n"
            "2. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å 5% –Ω–∞ –±–∞–ª–∞–Ω—Å, —Å –∫–∞–∂–¥–æ–≥–æ –∫—Ç–æ –∫—É–ø–∏—Ç —á–µ—Ä–µ–∑ —Ç–≤–æ–π –±–æ—Ç.\n"
            "3. –¢—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ —Å–æ —Å–≤–æ–∏–º –ª—é–±–∏–º—ã–º –º–∞–≥–∞–∑–∏–Ω–æ–º, —Ç.–∫ –æ–Ω —Ç–æ–ª—å–∫–æ —Ç–≤–æ–π –±–æ—Ç.\n"
            "==============================\n"
            "–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –±—Ä–æ–¥–∏—Ç—å –ø–æ —á–∞—Ç–∞–º –≤ –ø–æ–∏—Å–∫–∞—Ö –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞, –ø–æ–ø–∞–¥–∞—è –Ω–∞ —Ñ–µ–π–∫–æ–≤ –∏ —à–∞–≤–µ—Ä—â–∏–∫–æ–≤.\n"
            "==============================\n"
            "–®–∞–≥ - 1: –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞.\n"
            "==============================\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç: @BotFather –∏ –Ω–∞–∂–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    elif data == "main_menu":
        buttons = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ [–í –Ω–∞–ª–∏—á–∏–∏]", callback_data="start_shopping")],
            [InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_account")],
            [InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π?", callback_data="payment_issues")],
            [InlineKeyboardButton(f"–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ [{len(reviews)}]", callback_data="customer_reviews")],
            [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data="refresh_page")],
            [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞", callback_data="shop_contacts")],
            [InlineKeyboardButton("–®–≤—ã—Ä–æ–∫—É—Ä—ã", url="https://t.me/+Zx3PQ4wedFA1OGUy")],
            [InlineKeyboardButton("–ü–æ–ª—É—á–∏–ª 50 —Ä—É–±–ª–µ–π –Ω–∞ —Å—á—ë—Ç!", callback_data="get_bonus")],
            [InlineKeyboardButton("–õ—é–¥—Å–∫–æ–π —Ö–æ–¥", url="https://t.me/+Igh2MH5neNc2–óDNk")],
            [InlineKeyboardButton("EPIC GROUP - –†–æ–≤–Ω—ã–π —á–∞—Ç –†–§", url="https://t.me/+vWTGHDyhvP5mMTEx")],
            [InlineKeyboardButton("–ê–Ω–æ–Ω–∏–º–Ω—ã–π —Ñ–æ—Ç–æ—Ö–æ—Å—Ç–∏–Ω–≥", url="https://t.me/necroimg_bot")]
        ]
        await callback_query.message.edit_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ streetmagic38.\n"
            f"==============================\n"
            f"–ê–ù–ì–ê–†–°–ö - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–ê–ù–ì–ê–†–°–ö'] else '–ü—É—Å—Ç–æ')}\n"
            f"–£—Å–æ–ª—å–µ-–°–∏–±–∏—Ä—Å–∫–æ–µ - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–£–°–û–õ–¨–ï-–°–ò–ë–ò–†–°–ö–û–ï'] else '–ü—É—Å—Ç–æ')}\n"
            f"–ó–∏–º–∞ - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–ó–ò–ú–ê'] else '–ü—É—Å—Ç–æ')}\n"
            f"–°–∞—è–Ω—Å–∫ - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–°–ê–Ø–ù–°–ö'] else '–ü—É—Å—Ç–æ')}\n"
            f"–ò—Ä–∫—É—Ç—Å–∫ - {('–ï—Å—Ç—å –Ω–∞–ª–∏—á–∏–µ' if products['–ò–†–ö–£–¢–°–ö'] else '–ü—É—Å—Ç–æ')}\n"
            f"==============================\n"
            f"–û –º–∞–≥–∞–∑–∏–Ω–µ:\n"
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –º–∞—Ä–∫–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∏—Ç—Ä–∏–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
            f"==============================\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: 0 —Ä—É–±–ª–µ–π\n"
            f"–í–∞—à ID –≤–Ω—É—Ç—Ä–∏ —Å–∏—Å—Ç–µ–º—ã: {user_id}\n"
            f"–í–∞—à CHAT-ID: {chat_id}\n"
            f"==============================\n"
            f"–°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    elif data == "customer_reviews":
        await show_review(client, callback_query.message, 0, user_id)

    elif data.startswith("prev_review_"):
        index = int(data.split("_")[2])
        await show_review(client, callback_query.message, index - 1, user_id)

    elif data.startswith("next_review_"):
        index = int(data.split("_")[2])
        await show_review(client, callback_query.message, index + 1, user_id)

    elif data == "add_review":
        with conn:
            c.execute("SELECT COUNT(*) FROM reviews WHERE user_id = ?", (user_id,))
            review_count = c.fetchone()[0]
        if review_count < 1:
            await callback_query.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="customer_reviews")]])
            )
        else:
            await callback_query.message.edit_text("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏.")

    elif data == "check_payment":
        await check_payment_status(callback_query.message)

    elif data == "payment_help":
        await callback_query.message.edit_text(
            "1. –ù–µ –æ—à–∏–±–∏—Å—å –≤ —Å—É–º–º–µ, –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ—ë –∏ –æ–Ω–∞ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è —Ç–µ–±–µ –≤ –±—É—Ñ–µ—Ä, –∫–∞–∫ –∏ –∫–∞—Ä—Ç–∞.\n"
            "2. –î–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞, –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–µ–±–µ –∫–∞—Ä—Ç—ã –∏ —Å—É–º–º—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n"
            "3. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–æ–ª–µ–µ 40 –º–∏–Ω—É—Ç, –ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.\n"
            "4. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø–ª–∞—Ç—ã –ø–∏—Å–∞—Ç—å –Ω–∞ –ö–æ–Ω—Ç–∞–∫—Ç: @helpmagic1",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ", callback_data="return_to_order")]
            ])
        )

    elif data == "return_to_order":
        await check_payment_status(callback_query.message)

async def order_timeout(order_id, message):
    await asyncio.sleep(49 * 60)
    if order_id in pending_orders:
        await app.send_message(pending_orders[order_id]['chat_id'], "–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
        del pending_orders[order_id]

async def check_payment_status(message):
    product = current_order.get("product", {})
    card_number = "2200700457065448"
    buttons = [
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
        [InlineKeyboardButton("–ö–∞—Ä—Ç–∞ –∏ —Å—É–º–º–∞ –æ—Ç–¥–µ–ª—å–Ω–æ", callback_data="card_and_amount")],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ", callback_data="payment_help")]
    ]

    for remaining_minutes in range(49, -1, -1):
        btc_amount = calculate_btc_amount(float(product.get('price', 0)))
        await message.edit_text(
            f"–ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑.\n"
            f"==============================\n"
            f"–¢–æ–≤–∞—Ä: {product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({product.get('weight', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})\n"
            f"–ì–æ—Ä–æ–¥: {current_order.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–†–∞–π–æ–Ω: {current_order.get('location', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–¢–∏–ø –∫–ª–∞–¥–∞: {current_order.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"==============================\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {product.get('order_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–ö–∞—Ä—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {card_number}\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {product.get('price', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} —Ä—É–±–ª–µ–π\n"
            f"==============================\n"
            f"–í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞, –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É - –æ–ø–ª–∞—Ç–∏–ª–∏ —á—É–∂–æ–π –∑–∞–∫–∞–∑.\n"
            f"–û–∂–∏–¥–∞–µ–º —Ç–≤–æ—é –æ–ø–ª–∞—Ç—É {product.get('price', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} —Ä—É–±–ª–µ–π.\n"
            f"–í Bitcoin: {btc_amount:.8f}\n"
            f"–î–æ –æ—Ç–º–µ–Ω—ã –æ—Å—Ç–∞–ª–æ—Å—å: {remaining_minutes} –º–∏–Ω.\n",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        await asyncio.sleep(60)

async def display_payment_info(message, product, card_number, payment_method):
    buttons = [
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
        [InlineKeyboardButton("–ö–∞—Ä—Ç–∞ –∏ —Å—É–º–º–∞ –æ—Ç–¥–µ–ª—å–Ω–æ", callback_data="card_and_amount")],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ", callback_data="payment_help")]
    ]
    btc_amount = calculate_btc_amount(float(product['price']))
    await message.edit_text(
        f"–ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑.\n"
        f"==============================\n"
        f"–¢–æ–≤–∞—Ä: {product['name']} ({product['weight']})\n"
        f"–ì–æ—Ä–æ–¥: {product['city']}\n"
        f"–†–∞–π–æ–Ω: {product['location']}\n"
        f"–¢–∏–ø –∫–ª–∞–¥–∞: {product['type']}\n"
        f"==============================\n"
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {product['order_id']}\n"
        f"–ö–∞—Ä—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {card_number}\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {product['price']} —Ä—É–±–ª–µ–π\n"
        f"==============================\n"
        f"–í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞, –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É - –æ–ø–ª–∞—Ç–∏–ª–∏ —á—É–∂–æ–π –∑–∞–∫–∞–∑.\n"
        f"–û–∂–∏–¥–∞–µ–º —Ç–≤–æ—é –æ–ø–ª–∞—Ç—É {product['price']} —Ä—É–±–ª–µ–π.\n"
        f"–í Bitcoin: {btc_amount:.8f}\n"
        f"–î–æ –æ—Ç–º–µ–Ω—ã –æ—Å—Ç–∞–ª–æ—Å—å: 49 –º–∏–Ω.\n",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def show_review(client, message, index, user_id):
    if index < 0:
        index = 0
    if index >= len(reviews):
        index = len(reviews) - 1
    review = reviews[index]
    with conn:
        c.execute("SELECT review, author, date, city FROM reviews WHERE user_id = ?", (user_id,))
        user_reviews = c.fetchall()
    user_reviews_text = "\n\n".join([f"{ur[1]}: {ur[0]} ({ur[3]}, {ur[2]})" for ur in user_reviews])
    text = (
        f"–û—Ç–∑—ã–≤—ã –∏ —Ç—Ä–∏–ø—ã –º–∞–≥–∞–∑–∏–Ω–∞\n"
        f"==============================\n"
        f"–ü–∏—à–µ—Ç {review['author']}:\n"
        f"{review['text']}\n"
        f"==============================\n"
        f"–û—Ç–∑—ã–≤ –Ω–∞–ø–∏—Å–∞–Ω {review['date']}, {review['city']}\n\n"
        f"{user_reviews_text}"
    )
    buttons = [
        [InlineKeyboardButton("<<", callback_data=f"prev_review_{index}"), InlineKeyboardButton(f"{index + 1} –∏–∑ {len(reviews)}", callback_data="ignore"), InlineKeyboardButton(">>", callback_data=f"next_review_{index}")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤", callback_data="add_review")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await message.edit_text(text, reply_markup=InlineKeyboardMarkup(buttons))

@app.on_message(filters.text & filters.user(admin_chat_id))
async def add_user_review(client, message):
    chat_id = message.chat.id
    user_id = get_user_id(chat_id)
    review_text = message.text
    purchase_exists = c.execute("SELECT EXISTS(SELECT 1 FROM purchases WHERE user_id=?)", (user_id,)).fetchone()[0]
    if purchase_exists:
        product = c.execute("SELECT product_name, city FROM purchases WHERE user_id=?", (user_id,)).fetchone()
        review = {"author": "User", "text": review_text, "date": datetime.now().strftime('%d %b'), "city": product[1]}
        reviews.append(review)
        with conn:
            c.execute("INSERT INTO reviews (user_id, review, author, date, city) VALUES (?, ?, ?, ?, ?)", 
                      (user_id, review_text, "User", datetime.now().strftime('%d %b'), product[1]))
        await message.reply_text("–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–∑—ã–≤–∞–º", callback_data="customer_reviews")]]))
    else:
        await message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –±–µ–∑ –ø–æ–∫—É–ø–∫–∏.")

if __name__ == "__main__":
    app.run()